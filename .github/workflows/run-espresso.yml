name: Run Espresso (every 10 min, reuse last build)

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  run-tests:
    name: Run Espresso (${{ matrix.variant }})
    runs-on: macos-13
    strategy:
      matrix:
        include:
          - variant: mockDebug
            app_artifact: app-mockDebug.apk
            test_artifact: app-mockDebug-androidTest.apk
            app_file_name: app-mock-demo-debug.apk
            test_file_name: app-mock-demo-debug-androidTest.apk
            application_id_suffix: .mock.demo
          - variant: mockSandbox
            app_artifact: app-mockSandbox.apk
            test_artifact: app-mockSandbox-androidTest.apk
            app_file_name: app-mock-sandbox-debug.apk
            test_file_name: app-mock-sandbox-debug-androidTest.apk
            application_id_suffix: .mock.sandbox
          - variant: mockEurope
            app_artifact: app-mockEurope.apk
            test_artifact: app-mockEurope-androidTest.apk
            app_file_name: app-mock-europe-debug.apk
            test_file_name: app-mock-europe-debug-androidTest.apk
            application_id_suffix: .mock.europe
          - variant: prodDebug
            app_artifact: app-prodDebug.apk
            test_artifact: app-prodDebug-androidTest.apk
            app_file_name: app-prod-demo-debug.apk
            test_file_name: app-prod-demo-debug-androidTest.apk
            application_id_suffix: .demo

    # Avoid overlapping runs from the cron
    concurrency:
      group: scheduled-espresso-${{ matrix.variant }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Download app APK from last successful build
        uses: dawidd6/action-download-artifact@v10
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ github.event.repository.default_branch || github.ref_name || 'main' }}
          name: ${{ matrix.app_artifact }}
          path: ./artifacts/${{ matrix.variant }}/app
          if_no_artifact_found: fail

      - name: Download test APK from last successful build
        uses: dawidd6/action-download-artifact@v10
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ github.event.repository.default_branch || github.ref_name || 'main' }}
          name: ${{ matrix.test_artifact }}
          path: ./artifacts/${{ matrix.variant }}/test
          if_no_artifact_found: fail

      - name: Verify APKs
        run: |
          set -euo pipefail
          ls -R ./artifacts/${{ matrix.variant }}/app || true
          ls -R ./artifacts/${{ matrix.variant }}/test
          APP_APK=$(find "./artifacts/${{ matrix.variant }}/app" -name "${{ matrix.app_file_name }}" -print -quit)
          TEST_APK=$(find "./artifacts/${{ matrix.variant }}/test" -name "${{ matrix.test_file_name }}" -print -quit)
          if [ -z "$APP_APK" ]; then
            echo "App APK ${{ matrix.app_file_name }} not found for ${{ matrix.variant }}" >&2
            exit 1
          fi
          if [ -z "$TEST_APK" ]; then
            echo "Test APK ${{ matrix.test_file_name }} not found for ${{ matrix.variant }}" >&2
            exit 1
          fi
          echo "APP_APK_PATH=$APP_APK" >> "$GITHUB_ENV"
          echo "TEST_APK_PATH=$TEST_APK" >> "$GITHUB_ENV"

      - name: Determine applicationId (Groovy or Kotlin DSL)
        id: appid
        shell: bash
        run: |
          set -e
          APP_ID=""
          if [ -f app/build.gradle ]; then
            # Groovy DSL: applicationId "com.package"
            APP_ID=$(grep -m1 -E 'applicationId\s+"[^"]+"' app/build.gradle | sed -E 's/.*applicationId\s+"([^"]+)".*/\1/')
          fi
          if [ -z "$APP_ID" ] && [ -f app/build.gradle.kts ]; then
            # Kotlin DSL: applicationId = "com.package"
            APP_ID=$(grep -m1 -E 'applicationId\s*=\s*"[^"]+"' app/build.gradle.kts | sed -E 's/.*applicationId\s*=\s*"([^"]+)".*/\1/')
          fi
          if [ -z "$APP_ID" ]; then
            echo "Could not find applicationId in app/build.gradle or app/build.gradle.kts" >&2
            exit 1
          fi
          echo "APP_ID=$APP_ID" >> $GITHUB_OUTPUT

      - name: Start emulator and run instrumentation
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          target: default
          profile: Pixel_5
          emulator-options: "-no-snapshot-save -noaudio -no-boot-anim -camera-back none"
          script: |
            set -e
            adb devices

            # Install prebuilt APKs
            adb install -r "$APP_APK_PATH"
            adb install -r "$TEST_APK_PATH"

            FULL_APP_ID="${{ steps.appid.outputs.APP_ID }}${{ matrix.application_id_suffix }}"

            # Clear app data (optional but keeps runs independent)
            adb shell pm clear "$FULL_APP_ID" || true

            # Run all tests using AndroidX test runner
            adb shell am instrument -w -m -r \
              -e clearPackageData true \
              "$FULL_APP_ID.test/androidx.test.runner.AndroidJUnitRunner"

      - name: Capture logcat (always run)
        if: always()
        run: |
          adb logcat -d > logcat.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: espresso-logs-${{ matrix.variant }}
          path: |
            logcat.txt
